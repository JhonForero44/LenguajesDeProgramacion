"""
Un flujo de datos es una secuencia de datos que se procesa de forma continua y bajo demanda.
En lugar de cargar toda la informaci√≥n en memoria, se procesa en fragmentos o registros a medida que llegan (similar a c√≥mo funcionan los archivos grandes o los datos en tiempo real).
Caracter√≠sticas:
- Manejo de grandes vol√∫menes de datos sin cargarlos completos.
- √ötil para procesar datos en tiempo real (ej. sensores, logs, streaming de video).
- Se pueden combinar con la evaluaci√≥n perezosa.

Imagina que tienes tuber√≠as de agua üö∞.
- El agua son los datos (informaci√≥n).
- Las tuber√≠as son los caminos que sigue esa informaci√≥n.
- En cada tramo de la tuber√≠a, puedes transformar el agua: filtrarla, calentarla, enfriarla, etc.
En inform√°tica, eso se llama flujo de datos ‚Üí el recorrido que hace la informaci√≥n desde que aparece hasta que llega a su destino, pasando por pasos intermedios.
"""

# Ejemplo N1: Supongamos que tenemos un archivo de texto muy grande
# Lo leemos como flujo de datos (una l√≠nea a la vez)
"""
def leer_archivo_en_flujo(ruta):
    with open(ruta, "r") as archivo:
        for linea in archivo:
            yield linea.strip()  # Lazy: solo genera una l√≠nea cuando se pide

# Ejemplo de uso
for i, linea in enumerate(leer_archivo_en_flujo("archivo_grande.txt")):
    print(linea)
    if i == 4:  # Solo leemos las primeras 5 l√≠neas, el resto nunca se carga
        break

"""

# Ejemplo N2: Supongamos que tienes una lista de frutas ["manzana", "pera", "banano", "uva"]
# 1->El flujo de datos podr√≠a ser:
# 2->Recibo todas las frutas.
# 3->Me quedo solo con las que tengan m√°s de 5 letras.
# 4->Las convierto en MAY√öSCULAS.
# 5->Muestro el resultado.

# Paso 1: tengo mis datos (como la canasta de frutas)
frutas = ["manzana", "pera", "banano", "uva"]           # frutas ‚Üí es como la canasta original.
# Paso 2: filtro las frutas que tengan m√°s de 5 letras
frutas_filtradas = [f for f in frutas if len(f) > 5]    # frutas_filtradas ‚Üí solo dejo las que cumplen una condici√≥n (m√°s de 5 letras).
# Paso 3: convierto esas frutas a may√∫sculas
frutas_mayus = [f.upper() for f in frutas_filtradas]    # frutas_mayus ‚Üí transformo lo que queda (poner en may√∫sculas).
# Paso 4: muestro el resultado
print(frutas_mayus)                                     # print ‚Üí saco el resultado final.

# Ejemplo N2: Imagina que tienes n√∫meros en una lista y quieres
# 1-> Tomar solo los pares.
# 2-> Multiplicarlos por 2.
# 3-> Mostrar el resultado.

numeros = [1, 2, 3, 4, 5, 6]
# Tomo solo los pares
pares = [n for n in numeros if n % 2 == 0]
# Multiplico cada par por 2
resultado = [n * 2 for n in pares]
print(resultado) # [4, 8, 12]

# Ejemplo N3: Nombres y longitud
# Imagina que tienes una lista de nombres y quieres saber cu√°les son largos (m√°s de 4 letras).

# Lista inicial: los datos de entrada
nombres = ["Ana", "Luis", "Mariana", "Sof√≠a"]
# Paso 1: me quedo con los nombres largos (m√°s de 4 letras)
nombres_largos = [n for n in nombres if len(n) > 4]
# Paso 2: muestro los resultados
print(nombres_largos)   # ['Mariana', 'Sof√≠a']

# Ejemplo N4: Calificaciones de estudiantes
# Ahora supongamos que tienes calificaciones y quieres quedarte solo con las que son mayores o iguales a 3 (aprobados).

# Datos iniciales: calificaciones
notas = [2.5, 3.0, 4.5, 1.8, 5.0]
# Paso 1: filtro los aprobados
aprobados = [n for n in notas if n >= 3]
# Paso 2: muestro el resultado
print(aprobados) # [3.0, 4.5, 5.0]

# Ejemplo N5: Calificaciones de estudiantes
# Tienes precios de productos y quieres aplicar un 10% de descuento a cada uno.

# Datos iniciales: precios
precios = [100, 250, 80, 50]
# Paso 1: aplico un descuento del 10%
precios_descuento = [p * 0.9 for p in precios]
# Paso 2: muestro el resultado
print(precios_descuento)    # [90.0, 225.0, 72.0, 45.0]

# Ejemplo N6: Contar letras en palabras
# Ahora quieres contar cu√°ntas letras tiene cada palabra en una lista.

# Datos iniciales: palabras
palabras = ["sol", "luna", "estrella"]
# Paso 1: creo una lista con el n√∫mero de letras de cada palabra
longitudes = [len(p) for p in palabras]
# Paso 2: muestro el resultado
print(longitudes)   # [3, 4, 8]

