#Importar librerias
from abc import ABC, abstractmethod

#1. abstract 
#Una clase abstracta es una clase que no se puede instanciar directamente (no puedes hacer new de ella).
#Puede tener m√©todos abstractos (sin implementaci√≥n, solo firma) y tambi√©n m√©todos normales con c√≥digo.
#Se usa cuando quieres dar una plantilla com√∫n para que las subclases la completen.
#Clase abstracta
class Animal(ABC):
    @abstractmethod
    def hacer_sonido(self):
        pass  # m√©todo abstracto (sin implementaci√≥n)

    def dormir(self):
        print("Zzz...")  # m√©todo normal

#2. interface (Interfaz)
#Una interfaz es un contrato: define qu√© m√©todos deben implementarse, pero no tiene c√≥digo dentro (en algunos lenguajes modernos ya puede tener default o static methods).
#Una clase puede implementar varias interfaces (m√∫ltiple herencia de comportamiento).
#Se usa cuando quieres garantizar que todas las clases que la implementen tengan los mismos m√©todos, sin importar su jerarqu√≠a.
# üîπ Interfaz simulada (usando ABC)
class Volador(ABC):
    @abstractmethod
    def volar(self):
        pass

#3. extends (Herencia)
#extends significa que una clase hereda de otra.
#Se usa con clases (y tambi√©n con interfaces en algunos casos).
#Cuando una clase extiende otra, hereda sus atributos y m√©todos, y puede sobreescribirlos (override).
#Clase que hereda de Animal (extends) e implementa Volador (interface)
class Pajaro(Animal, Volador):
    def hacer_sonido(self):
        print("P√≠o P√≠o üê¶")

    def volar(self):
        print("El p√°jaro vuela alto üöÄ")

#Uso
p = Pajaro()
p.hacer_sonido()  # Implementaci√≥n propia
p.volar()         # Cumple la "interfaz"
p.dormir()        # M√©todo heredado de Animal